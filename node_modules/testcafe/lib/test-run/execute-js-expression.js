'use strict';

exports.__esModule = true;
exports.executeJsExpression = executeJsExpression;

var _vm = require('vm');

var _selectorBuilder = require('../client-functions/selectors/selector-builder');

var _selectorBuilder2 = _interopRequireDefault(_selectorBuilder);

var _clientFunctionBuilder = require('../client-functions/client-function-builder');

var _clientFunctionBuilder2 = _interopRequireDefault(_clientFunctionBuilder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const contextsInfo = [];

function getContextInfo(testRun) {
    let contextInfo = contextsInfo.find(info => info.testRun === testRun);

    if (!contextInfo) {
        contextInfo = { testRun, context: createExecutionContext(testRun), options: {} };

        contextsInfo.push(contextInfo);
    }

    return contextInfo;
}

function getContext(testRun, options = {}) {
    const contextInfo = getContextInfo(testRun);

    contextInfo.options = options;

    return contextInfo.context;
}

function createExecutionContext(testRun) {
    const sandbox = {
        Selector: (fn, options = {}) => {
            var _getContextInfo$optio = getContextInfo(testRun).options;
            const skipVisibilityCheck = _getContextInfo$optio.skipVisibilityCheck,
                  collectionMode = _getContextInfo$optio.collectionMode;


            if (skipVisibilityCheck) options.visibilityCheck = false;

            if (testRun && testRun.id) options.boundTestRun = testRun;

            if (collectionMode) options.collectionMode = collectionMode;

            const builder = new _selectorBuilder2.default(fn, options, { instantiation: 'Selector' });

            return builder.getFunction();
        },

        ClientFunction: (fn, options = {}) => {
            if (testRun && testRun.id) options.boundTestRun = testRun;

            const builder = new _clientFunctionBuilder2.default(fn, options, { instantiation: 'ClientFunction' });

            return builder.getFunction();
        }
    };

    return (0, _vm.createContext)(sandbox);
}

function executeJsExpression(expression, testRun, options) {
    const context = getContext(testRun, options);

    return (0, _vm.runInContext)(expression, context, { displayErrors: false });
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0LXJ1bi9leGVjdXRlLWpzLWV4cHJlc3Npb24uanMiXSwibmFtZXMiOlsiZXhlY3V0ZUpzRXhwcmVzc2lvbiIsImNvbnRleHRzSW5mbyIsImdldENvbnRleHRJbmZvIiwidGVzdFJ1biIsImNvbnRleHRJbmZvIiwiZmluZCIsImluZm8iLCJjb250ZXh0IiwiY3JlYXRlRXhlY3V0aW9uQ29udGV4dCIsIm9wdGlvbnMiLCJwdXNoIiwiZ2V0Q29udGV4dCIsInNhbmRib3giLCJTZWxlY3RvciIsImZuIiwic2tpcFZpc2liaWxpdHlDaGVjayIsImNvbGxlY3Rpb25Nb2RlIiwidmlzaWJpbGl0eUNoZWNrIiwiaWQiLCJib3VuZFRlc3RSdW4iLCJidWlsZGVyIiwiU2VsZWN0b3JCdWlsZGVyIiwiaW5zdGFudGlhdGlvbiIsImdldEZ1bmN0aW9uIiwiQ2xpZW50RnVuY3Rpb24iLCJDbGllbnRGdW5jdGlvbkJ1aWxkZXIiLCJleHByZXNzaW9uIiwiZGlzcGxheUVycm9ycyJdLCJtYXBwaW5ncyI6Ijs7O1FBMERnQkEsbUIsR0FBQUEsbUI7O0FBMURoQjs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxNQUFNQyxlQUFlLEVBQXJCOztBQUVBLFNBQVNDLGNBQVQsQ0FBeUJDLE9BQXpCLEVBQWtDO0FBQzlCLFFBQUlDLGNBQWNILGFBQWFJLElBQWIsQ0FBa0JDLFFBQVFBLEtBQUtILE9BQUwsS0FBaUJBLE9BQTNDLENBQWxCOztBQUVBLFFBQUksQ0FBQ0MsV0FBTCxFQUFrQjtBQUNkQSxzQkFBYyxFQUFFRCxPQUFGLEVBQVdJLFNBQVNDLHVCQUF1QkwsT0FBdkIsQ0FBcEIsRUFBcURNLFNBQVMsRUFBOUQsRUFBZDs7QUFFQVIscUJBQWFTLElBQWIsQ0FBa0JOLFdBQWxCO0FBQ0g7O0FBRUQsV0FBT0EsV0FBUDtBQUNIOztBQUVELFNBQVNPLFVBQVQsQ0FBcUJSLE9BQXJCLEVBQThCTSxVQUFVLEVBQXhDLEVBQTRDO0FBQ3hDLFVBQU1MLGNBQWNGLGVBQWVDLE9BQWYsQ0FBcEI7O0FBRUFDLGdCQUFZSyxPQUFaLEdBQXNCQSxPQUF0Qjs7QUFFQSxXQUFPTCxZQUFZRyxPQUFuQjtBQUNIOztBQUVELFNBQVNDLHNCQUFULENBQWlDTCxPQUFqQyxFQUEwQztBQUN0QyxVQUFNUyxVQUFVO0FBQ1pDLGtCQUFVLENBQUNDLEVBQUQsRUFBS0wsVUFBVSxFQUFmLEtBQXNCO0FBQUEsd0NBQ29CUCxlQUFlQyxPQUFmLEVBQXdCTSxPQUQ1QztBQUFBLGtCQUNwQk0sbUJBRG9CLHlCQUNwQkEsbUJBRG9CO0FBQUEsa0JBQ0NDLGNBREQseUJBQ0NBLGNBREQ7OztBQUc1QixnQkFBSUQsbUJBQUosRUFDSU4sUUFBUVEsZUFBUixHQUEwQixLQUExQjs7QUFFSixnQkFBSWQsV0FBV0EsUUFBUWUsRUFBdkIsRUFDSVQsUUFBUVUsWUFBUixHQUF1QmhCLE9BQXZCOztBQUVKLGdCQUFJYSxjQUFKLEVBQ0lQLFFBQVFPLGNBQVIsR0FBeUJBLGNBQXpCOztBQUVKLGtCQUFNSSxVQUFVLElBQUlDLHlCQUFKLENBQW9CUCxFQUFwQixFQUF3QkwsT0FBeEIsRUFBaUMsRUFBRWEsZUFBZSxVQUFqQixFQUFqQyxDQUFoQjs7QUFFQSxtQkFBT0YsUUFBUUcsV0FBUixFQUFQO0FBQ0gsU0FoQlc7O0FBa0JaQyx3QkFBZ0IsQ0FBQ1YsRUFBRCxFQUFLTCxVQUFVLEVBQWYsS0FBc0I7QUFDbEMsZ0JBQUlOLFdBQVdBLFFBQVFlLEVBQXZCLEVBQ0lULFFBQVFVLFlBQVIsR0FBdUJoQixPQUF2Qjs7QUFFSixrQkFBTWlCLFVBQVUsSUFBSUssK0JBQUosQ0FBMEJYLEVBQTFCLEVBQThCTCxPQUE5QixFQUF1QyxFQUFFYSxlQUFlLGdCQUFqQixFQUF2QyxDQUFoQjs7QUFFQSxtQkFBT0YsUUFBUUcsV0FBUixFQUFQO0FBQ0g7QUF6QlcsS0FBaEI7O0FBNEJBLFdBQU8sdUJBQWNYLE9BQWQsQ0FBUDtBQUNIOztBQUVNLFNBQVNaLG1CQUFULENBQThCMEIsVUFBOUIsRUFBMEN2QixPQUExQyxFQUFtRE0sT0FBbkQsRUFBNEQ7QUFDL0QsVUFBTUYsVUFBVUksV0FBV1IsT0FBWCxFQUFvQk0sT0FBcEIsQ0FBaEI7O0FBRUEsV0FBTyxzQkFBYWlCLFVBQWIsRUFBeUJuQixPQUF6QixFQUFrQyxFQUFFb0IsZUFBZSxLQUFqQixFQUFsQyxDQUFQO0FBQ0giLCJmaWxlIjoidGVzdC1ydW4vZXhlY3V0ZS1qcy1leHByZXNzaW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgcnVuSW5Db250ZXh0IH0gZnJvbSAndm0nO1xuaW1wb3J0IFNlbGVjdG9yQnVpbGRlciBmcm9tICcuLi9jbGllbnQtZnVuY3Rpb25zL3NlbGVjdG9ycy9zZWxlY3Rvci1idWlsZGVyJztcbmltcG9ydCBDbGllbnRGdW5jdGlvbkJ1aWxkZXIgZnJvbSAnLi4vY2xpZW50LWZ1bmN0aW9ucy9jbGllbnQtZnVuY3Rpb24tYnVpbGRlcic7XG5cbmNvbnN0IGNvbnRleHRzSW5mbyA9IFtdO1xuXG5mdW5jdGlvbiBnZXRDb250ZXh0SW5mbyAodGVzdFJ1bikge1xuICAgIGxldCBjb250ZXh0SW5mbyA9IGNvbnRleHRzSW5mby5maW5kKGluZm8gPT4gaW5mby50ZXN0UnVuID09PSB0ZXN0UnVuKTtcblxuICAgIGlmICghY29udGV4dEluZm8pIHtcbiAgICAgICAgY29udGV4dEluZm8gPSB7IHRlc3RSdW4sIGNvbnRleHQ6IGNyZWF0ZUV4ZWN1dGlvbkNvbnRleHQodGVzdFJ1biksIG9wdGlvbnM6IHt9IH07XG5cbiAgICAgICAgY29udGV4dHNJbmZvLnB1c2goY29udGV4dEluZm8pO1xuICAgIH1cblxuICAgIHJldHVybiBjb250ZXh0SW5mbztcbn1cblxuZnVuY3Rpb24gZ2V0Q29udGV4dCAodGVzdFJ1biwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgY29udGV4dEluZm8gPSBnZXRDb250ZXh0SW5mbyh0ZXN0UnVuKTtcblxuICAgIGNvbnRleHRJbmZvLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgcmV0dXJuIGNvbnRleHRJbmZvLmNvbnRleHQ7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV4ZWN1dGlvbkNvbnRleHQgKHRlc3RSdW4pIHtcbiAgICBjb25zdCBzYW5kYm94ID0ge1xuICAgICAgICBTZWxlY3RvcjogKGZuLCBvcHRpb25zID0ge30pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgc2tpcFZpc2liaWxpdHlDaGVjaywgY29sbGVjdGlvbk1vZGUgfSA9IGdldENvbnRleHRJbmZvKHRlc3RSdW4pLm9wdGlvbnM7XG5cbiAgICAgICAgICAgIGlmIChza2lwVmlzaWJpbGl0eUNoZWNrKVxuICAgICAgICAgICAgICAgIG9wdGlvbnMudmlzaWJpbGl0eUNoZWNrID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmICh0ZXN0UnVuICYmIHRlc3RSdW4uaWQpXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5ib3VuZFRlc3RSdW4gPSB0ZXN0UnVuO1xuXG4gICAgICAgICAgICBpZiAoY29sbGVjdGlvbk1vZGUpXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5jb2xsZWN0aW9uTW9kZSA9IGNvbGxlY3Rpb25Nb2RlO1xuXG4gICAgICAgICAgICBjb25zdCBidWlsZGVyID0gbmV3IFNlbGVjdG9yQnVpbGRlcihmbiwgb3B0aW9ucywgeyBpbnN0YW50aWF0aW9uOiAnU2VsZWN0b3InIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlci5nZXRGdW5jdGlvbigpO1xuICAgICAgICB9LFxuXG4gICAgICAgIENsaWVudEZ1bmN0aW9uOiAoZm4sIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgICAgICAgICAgaWYgKHRlc3RSdW4gJiYgdGVzdFJ1bi5pZClcbiAgICAgICAgICAgICAgICBvcHRpb25zLmJvdW5kVGVzdFJ1biA9IHRlc3RSdW47XG5cbiAgICAgICAgICAgIGNvbnN0IGJ1aWxkZXIgPSBuZXcgQ2xpZW50RnVuY3Rpb25CdWlsZGVyKGZuLCBvcHRpb25zLCB7IGluc3RhbnRpYXRpb246ICdDbGllbnRGdW5jdGlvbicgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBidWlsZGVyLmdldEZ1bmN0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIGNyZWF0ZUNvbnRleHQoc2FuZGJveCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleGVjdXRlSnNFeHByZXNzaW9uIChleHByZXNzaW9uLCB0ZXN0UnVuLCBvcHRpb25zKSB7XG4gICAgY29uc3QgY29udGV4dCA9IGdldENvbnRleHQodGVzdFJ1biwgb3B0aW9ucyk7XG5cbiAgICByZXR1cm4gcnVuSW5Db250ZXh0KGV4cHJlc3Npb24sIGNvbnRleHQsIHsgZGlzcGxheUVycm9yczogZmFsc2UgfSk7XG59XG4iXX0=
