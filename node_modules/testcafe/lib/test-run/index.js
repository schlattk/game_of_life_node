'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _lodash = require('lodash');

var _readFileRelative = require('read-file-relative');

var _promisifyEvent = require('promisify-event');

var _promisifyEvent2 = _interopRequireDefault(_promisifyEvent);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _mustache = require('mustache');

var _mustache2 = _interopRequireDefault(_mustache);

var _debugLogger = require('../notifications/debug-logger');

var _debugLogger2 = _interopRequireDefault(_debugLogger);

var _sessionController = require('./session-controller');

var _sessionController2 = _interopRequireDefault(_sessionController);

var _debugLog = require('./debug-log');

var _debugLog2 = _interopRequireDefault(_debugLog);

var _formattableAdapter = require('../errors/test-run/formattable-adapter');

var _formattableAdapter2 = _interopRequireDefault(_formattableAdapter);

var _errorList = require('../errors/error-list');

var _errorList2 = _interopRequireDefault(_errorList);

var _executeJsExpression = require('./execute-js-expression');

var _testRun = require('../errors/test-run/');

var _browserManipulationQueue = require('./browser-manipulation-queue');

var _browserManipulationQueue2 = _interopRequireDefault(_browserManipulationQueue);

var _phase = require('./phase');

var _phase2 = _interopRequireDefault(_phase);

var _clientMessages = require('./client-messages');

var _clientMessages2 = _interopRequireDefault(_clientMessages);

var _type = require('./commands/type');

var _type2 = _interopRequireDefault(_type);

var _executor = require('../assertions/executor');

var _executor2 = _interopRequireDefault(_executor);

var _delay = require('../utils/delay');

var _delay2 = _interopRequireDefault(_delay);

var _markerSymbol = require('./marker-symbol');

var _markerSymbol2 = _interopRequireDefault(_markerSymbol);

var _testRunTracker = require('../api/test-run-tracker');

var _testRunTracker2 = _interopRequireDefault(_testRunTracker);

var _phase3 = require('../role/phase');

var _phase4 = _interopRequireDefault(_phase3);

var _bookmark = require('./bookmark');

var _bookmark2 = _interopRequireDefault(_bookmark);

var _clientFunctionBuilder = require('../client-functions/client-function-builder');

var _clientFunctionBuilder2 = _interopRequireDefault(_clientFunctionBuilder);

var _pluginHost = require('../reporter/plugin-host');

var _pluginHost2 = _interopRequireDefault(_pluginHost);

var _browserConsoleMessages = require('./browser-console-messages');

var _browserConsoleMessages2 = _interopRequireDefault(_browserConsoleMessages);

var _unstableNetworkMode = require('../browser/connection/unstable-network-mode');

var _warningMessage = require('../notifications/warning-message');

var _warningMessage2 = _interopRequireDefault(_warningMessage);

var _browserManipulation = require('./commands/browser-manipulation');

var _actions = require('./commands/actions');

var _service = require('./commands/service');

var _utils = require('./commands/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const TEST_RUN_TEMPLATE = (0, _readFileRelative.readSync)('../client/test-run/index.js.mustache');
const IFRAME_TEST_RUN_TEMPLATE = (0, _readFileRelative.readSync)('../client/test-run/iframe.js.mustache');
const TEST_DONE_CONFIRMATION_RESPONSE = 'test-done-confirmation';
const MAX_RESPONSE_DELAY = 2 * 60 * 1000;

const ALL_DRIVER_TASKS_ADDED_TO_QUEUE_EVENT = 'all-driver-tasks-added-to-queue';

class TestRun extends _events2.default {
    constructor(test, browserConnection, screenshotCapturer, warningLog, opts) {
        super();

        this[_markerSymbol2.default] = true;

        this.opts = opts;
        this.test = test;
        this.browserConnection = browserConnection;

        this.phase = _phase2.default.initial;

        this.driverTaskQueue = [];
        this.testDoneCommandQueued = false;

        this.activeDialogHandler = null;
        this.activeIframeSelector = null;
        this.speed = this.opts.speed;
        this.pageLoadTimeout = this.opts.pageLoadTimeout;

        this.disablePageReloads = test.disablePageReloads || opts.disablePageReloads && test.disablePageReloads !== false;

        this.session = _sessionController2.default.getSession(this);

        this.consoleMessages = new _browserConsoleMessages2.default();

        this.pendingRequest = null;
        this.pendingPageError = null;

        this.controller = null;
        this.ctx = (0, _create2.default)(null);
        this.fixtureCtx = null;

        this.currentRoleId = null;
        this.usedRoleStates = (0, _create2.default)(null);

        this.errs = [];

        this.lastDriverStatusId = null;
        this.lastDriverStatusResponse = null;

        this.fileDownloadingHandled = false;
        this.resolveWaitForFileDownloadingPromise = null;

        this.addingDriverTasksCount = 0;

        this.debugging = this.opts.debugMode;
        this.debugOnFail = this.opts.debugOnFail;
        this.disableDebugBreakpoints = false;
        this.debugReporterPluginHost = new _pluginHost2.default({ noColors: false });

        this.browserManipulationQueue = new _browserManipulationQueue2.default(browserConnection, screenshotCapturer, warningLog);

        this.debugLog = new _debugLog2.default(this.browserConnection.userAgent);

        this.quarantine = null;

        this.warningLog = warningLog;

        this.injectable.scripts.push('/testcafe-core.js');
        this.injectable.scripts.push('/testcafe-ui.js');
        this.injectable.scripts.push('/testcafe-automation.js');
        this.injectable.scripts.push('/testcafe-driver.js');
        this.injectable.styles.push('/testcafe-ui-styles.css');

        this.requestHooks = (0, _from2.default)(this.test.requestHooks);

        this._initRequestHooks();
    }

    get id() {
        return this.session.id;
    }

    get injectable() {
        return this.session.injectable;
    }

    addQuarantineInfo(quarantine) {
        this.quarantine = quarantine;
    }

    addRequestHook(hook) {
        if (this.requestHooks.indexOf(hook) !== -1) return;

        this.requestHooks.push(hook);
        this._initRequestHook(hook);
    }

    removeRequestHook(hook) {
        if (this.requestHooks.indexOf(hook) === -1) return;

        (0, _lodash.pull)(this.requestHooks, hook);
        this._disposeRequestHook(hook);
    }

    _initRequestHook(hook) {
        hook.warningLog = this.warningLog;

        hook._instantiateRequestFilterRules();
        hook._instantiatedRequestFilterRules.forEach(rule => {
            this.session.addRequestEventListeners(rule, {
                onRequest: hook.onRequest.bind(hook),
                onConfigureResponse: hook._onConfigureResponse.bind(hook),
                onResponse: hook.onResponse.bind(hook)
            });
        });
    }

    _disposeRequestHook(hook) {
        hook.warningLog = null;

        hook._instantiatedRequestFilterRules.forEach(rule => {
            this.session.removeRequestEventListeners(rule);
        });
    }

    _initRequestHooks() {
        this.requestHooks.forEach(hook => this._initRequestHook(hook));
    }

    // Hammerhead payload
    _getPayloadScript() {
        this.fileDownloadingHandled = false;
        this.resolveWaitForFileDownloadingPromise = null;

        return _mustache2.default.render(TEST_RUN_TEMPLATE, {
            testRunId: (0, _stringify2.default)(this.session.id),
            browserId: (0, _stringify2.default)(this.browserConnection.id),
            browserHeartbeatRelativeUrl: (0, _stringify2.default)(this.browserConnection.heartbeatRelativeUrl),
            browserStatusRelativeUrl: (0, _stringify2.default)(this.browserConnection.statusRelativeUrl),
            browserStatusDoneRelativeUrl: (0, _stringify2.default)(this.browserConnection.statusDoneRelativeUrl),
            userAgent: (0, _stringify2.default)(this.browserConnection.userAgent),
            testName: (0, _stringify2.default)(this.test.name),
            fixtureName: (0, _stringify2.default)(this.test.fixture.name),
            selectorTimeout: this.opts.selectorTimeout,
            pageLoadTimeout: this.pageLoadTimeout,
            skipJsErrors: this.opts.skipJsErrors,
            retryTestPages: !!this.opts.retryTestPages,
            speed: this.speed,
            dialogHandler: (0, _stringify2.default)(this.activeDialogHandler)
        });
    }

    _getIframePayloadScript() {
        return _mustache2.default.render(IFRAME_TEST_RUN_TEMPLATE, {
            testRunId: (0, _stringify2.default)(this.session.id),
            selectorTimeout: this.opts.selectorTimeout,
            pageLoadTimeout: this.pageLoadTimeout,
            retryTestPages: !!this.opts.retryTestPages,
            speed: this.speed,
            dialogHandler: (0, _stringify2.default)(this.activeDialogHandler)
        });
    }

    // Hammerhead handlers
    getAuthCredentials() {
        return this.test.authCredentials;
    }

    handleFileDownload() {
        if (this.resolveWaitForFileDownloadingPromise) {
            this.resolveWaitForFileDownloadingPromise(true);
            this.resolveWaitForFileDownloadingPromise = null;
        } else this.fileDownloadingHandled = true;
    }

    handlePageError(ctx, err) {
        if (ctx.req.headers[_unstableNetworkMode.UNSTABLE_NETWORK_MODE_HEADER]) {
            ctx.closeWithError(500, err.toString());
            return;
        }

        this.pendingPageError = new _testRun.PageLoadError(err);

        ctx.redirect(ctx.toProxyUrl('about:error'));
    }

    // Test function execution
    _executeTestFn(phase, fn) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this.phase = phase;

            try {
                yield fn(_this);
            } catch (err) {
                let screenshotPath = null;

                if (_this.opts.takeScreenshotsOnFails) screenshotPath = yield _this.executeCommand(new _browserManipulation.TakeScreenshotOnFailCommand());

                _this.addError(err, screenshotPath);
                return false;
            }

            return !_this._addPendingPageErrorIfAny();
        })();
    }

    _runBeforeHook() {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (_this2.test.beforeFn) return yield _this2._executeTestFn(_phase2.default.inTestBeforeHook, _this2.test.beforeFn);

            if (_this2.test.fixture.beforeEachFn) return yield _this2._executeTestFn(_phase2.default.inFixtureBeforeEachHook, _this2.test.fixture.beforeEachFn);

            return true;
        })();
    }

    _runAfterHook() {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (_this3.test.afterFn) return yield _this3._executeTestFn(_phase2.default.inTestAfterHook, _this3.test.afterFn);

            if (_this3.test.fixture.afterEachFn) return yield _this3._executeTestFn(_phase2.default.inFixtureAfterEachHook, _this3.test.fixture.afterEachFn);

            return true;
        })();
    }

    start() {
        var _this4 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _testRunTracker2.default.activeTestRuns[_this4.session.id] = _this4;

            _this4.emit('start');

            const onDisconnected = function onDisconnected(err) {
                return _this4._disconnect(err);
            };

            _this4.browserConnection.once('disconnected', onDisconnected);

            if (yield _this4._runBeforeHook()) {
                yield _this4._executeTestFn(_phase2.default.inTest, _this4.test.fn);
                yield _this4._runAfterHook();
            }

            if (_this4.disconnected) return;

            _this4.browserConnection.removeListener('disconnected', onDisconnected);

            if (_this4.errs.length && _this4.debugOnFail) yield _this4._enqueueSetBreakpointCommand(null, _this4.debugReporterPluginHost.formatError(_this4.errs[0]));

            yield _this4.executeCommand(new _service.TestDoneCommand());

            _this4._addPendingPageErrorIfAny();

            delete _testRunTracker2.default.activeTestRuns[_this4.session.id];

            _this4.emit('done');
        })();
    }

    _evaluate(code) {
        try {
            return (0, _executeJsExpression.executeJsExpression)(code, this, { skipVisibilityCheck: false });
        } catch (err) {
            return { err };
        }
    }

    // Errors
    _addPendingPageErrorIfAny() {
        if (this.pendingPageError) {
            this.addError(this.pendingPageError);
            this.pendingPageError = null;
            return true;
        }

        return false;
    }

    addError(err, screenshotPath) {
        const errList = err instanceof _errorList2.default ? err.items : [err];

        errList.forEach(item => {
            const adapter = new _formattableAdapter2.default(item, {
                userAgent: this.browserConnection.userAgent,
                screenshotPath: screenshotPath || '',
                testRunPhase: this.phase
            });

            this.errs.push(adapter);
        });
    }

    // Task queue
    _enqueueCommand(command, callsite) {
        if (this.pendingRequest) this._resolvePendingRequest(command);

        return new _pinkie2.default((resolve, reject) => {
            this.addingDriverTasksCount--;
            this.driverTaskQueue.push({ command, resolve, reject, callsite });

            if (!this.addingDriverTasksCount) this.emit(ALL_DRIVER_TASKS_ADDED_TO_QUEUE_EVENT, this.driverTaskQueue.length);
        });
    }

    get driverTaskQueueLength() {
        return this.addingDriverTasksCount ? (0, _promisifyEvent2.default)(this, ALL_DRIVER_TASKS_ADDED_TO_QUEUE_EVENT) : _pinkie2.default.resolve(this.driverTaskQueue.length);
    }

    _enqueueBrowserConsoleMessagesCommand(command, callsite) {
        var _this5 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            yield _this5._enqueueCommand(command, callsite);

            return _this5.consoleMessages.getCopy();
        })();
    }

    _enqueueSetBreakpointCommand(callsite, error) {
        var _this6 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (_this6.browserConnection.isHeadlessBrowser()) {
                _this6.warningLog.addWarning(_warningMessage2.default.debugInHeadlessError);
                return;
            }

            _debugLogger2.default.showBreakpoint(_this6.session.id, _this6.browserConnection.userAgent, callsite, error);

            _this6.debugging = yield _this6.executeCommand(new _service.SetBreakpointCommand(!!error), callsite);
        })();
    }

    _removeAllNonServiceTasks() {
        this.driverTaskQueue = this.driverTaskQueue.filter(driverTask => (0, _utils.isServiceCommand)(driverTask.command));

        this.browserManipulationQueue.removeAllNonServiceManipulations();
    }

    // Current driver task
    get currentDriverTask() {
        return this.driverTaskQueue[0];
    }

    _resolveCurrentDriverTask(result) {
        this.currentDriverTask.resolve(result);
        this.driverTaskQueue.shift();

        if (this.testDoneCommandQueued) this._removeAllNonServiceTasks();
    }

    _rejectCurrentDriverTask(err) {
        err.callsite = err.callsite || this.currentDriverTask.callsite;
        err.isRejectedDriverTask = true;

        this.currentDriverTask.reject(err);
        this._removeAllNonServiceTasks();
    }

    // Pending request
    _clearPendingRequest() {
        if (this.pendingRequest) {
            clearTimeout(this.pendingRequest.responseTimeout);
            this.pendingRequest = null;
        }
    }

    _resolvePendingRequest(command) {
        this.lastDriverStatusResponse = command;
        this.pendingRequest.resolve(command);
        this._clearPendingRequest();
    }

    // Handle driver request
    _fulfillCurrentDriverTask(driverStatus) {
        if (driverStatus.executionError) this._rejectCurrentDriverTask(driverStatus.executionError);else this._resolveCurrentDriverTask(driverStatus.result);
    }

    _handlePageErrorStatus(pageError) {
        if (this.currentDriverTask && (0, _utils.isCommandRejectableByPageError)(this.currentDriverTask.command)) {
            this._rejectCurrentDriverTask(pageError);
            this.pendingPageError = null;

            return true;
        }

        this.pendingPageError = this.pendingPageError || pageError;

        return false;
    }

    _handleDriverRequest(driverStatus) {
        const isTestDone = this.currentDriverTask && this.currentDriverTask.command.type === _type2.default.testDone;
        const pageError = this.pendingPageError || driverStatus.pageError;
        const currentTaskRejectedByError = pageError && this._handlePageErrorStatus(pageError);

        if (this.disconnected) return new _pinkie2.default((_, reject) => reject());

        this.consoleMessages.concat(driverStatus.consoleMessages);

        if (!currentTaskRejectedByError && driverStatus.isCommandResult) {
            if (isTestDone) {
                this._resolveCurrentDriverTask();

                return TEST_DONE_CONFIRMATION_RESPONSE;
            }

            this._fulfillCurrentDriverTask(driverStatus);
        }

        return this._getCurrentDriverTaskCommand();
    }

    _getCurrentDriverTaskCommand() {
        if (!this.currentDriverTask) return null;

        const command = this.currentDriverTask.command;

        if (command.type === _type2.default.navigateTo && command.stateSnapshot) this.session.useStateSnapshot(JSON.parse(command.stateSnapshot));

        return command;
    }

    // Execute command
    _executeExpression(command) {
        var _this7 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const resultVariableName = command.resultVariableName,
                  isAsyncExpression = command.isAsyncExpression;


            let expression = command.expression;

            if (isAsyncExpression) expression = `await ${expression}`;

            if (resultVariableName) expression = `${resultVariableName} = ${expression}, ${resultVariableName}`;

            if (isAsyncExpression) expression = `(async () => { return ${expression}; }).apply(this);`;

            const result = _this7._evaluate(expression);

            return isAsyncExpression ? yield result : result;
        })();
    }

    _executeAssertion(command, callsite) {
        var _this8 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const assertionTimeout = command.options.timeout === void 0 ? _this8.opts.assertionTimeout : command.options.timeout;
            const executor = new _executor2.default(command, assertionTimeout, callsite);

            executor.once('start-assertion-retries', function (timeout) {
                return _this8.executeCommand(new _service.ShowAssertionRetriesStatusCommand(timeout));
            });
            executor.once('end-assertion-retries', function (success) {
                return _this8.executeCommand(new _service.HideAssertionRetriesStatusCommand(success));
            });

            return executor.run();
        })();
    }

    _adjustConfigurationWithCommand(command) {
        if (command.type === _type2.default.testDone) {
            this.testDoneCommandQueued = true;
            _debugLogger2.default.hideBreakpoint(this.session.id);
        } else if (command.type === _type2.default.setNativeDialogHandler) this.activeDialogHandler = command.dialogHandler;else if (command.type === _type2.default.switchToIframe) this.activeIframeSelector = command.selector;else if (command.type === _type2.default.switchToMainWindow) this.activeIframeSelector = null;else if (command.type === _type2.default.setTestSpeed) this.speed = command.speed;else if (command.type === _type2.default.setPageLoadTimeout) this.pageLoadTimeout = command.duration;else if (command.type === _type2.default.debug) this.debugging = true;
    }

    _adjustScreenshotCommand(command) {
        var _this9 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const browserId = _this9.browserConnection.id;

            var _ref = yield _this9.browserConnection.provider.hasCustomActionForBrowser(browserId);

            const hasChromelessScreenshots = _ref.hasChromelessScreenshots;


            if (!hasChromelessScreenshots) command.generateScreenshotMark();
        })();
    }

    _setBreakpointIfNecessary(command, callsite) {
        var _this10 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (!_this10.disableDebugBreakpoints && _this10.debugging && (0, _utils.canSetDebuggerBreakpointBeforeCommand)(command)) yield _this10._enqueueSetBreakpointCommand(callsite);
        })();
    }

    executeCommand(command, callsite) {
        var _this11 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this11.debugLog.command(command);

            if (_this11.pendingPageError && (0, _utils.isCommandRejectableByPageError)(command)) return _this11._rejectCommandWithPageError(callsite);

            if ((0, _utils.isExecutableOnClientCommand)(command)) _this11.addingDriverTasksCount++;

            _this11._adjustConfigurationWithCommand(command);

            yield _this11._setBreakpointIfNecessary(command, callsite);

            if ((0, _utils.isScreenshotCommand)(command)) yield _this11._adjustScreenshotCommand(command);

            if ((0, _utils.isBrowserManipulationCommand)(command)) _this11.browserManipulationQueue.push(command);

            if (command.type === _type2.default.wait) return (0, _delay2.default)(command.timeout);

            if (command.type === _type2.default.setPageLoadTimeout) return null;

            if (command.type === _type2.default.debug) return yield _this11._enqueueSetBreakpointCommand(callsite);

            if (command.type === _type2.default.useRole) return yield _this11._useRole(command.role, callsite);

            if (command.type === _type2.default.assertion) return _this11._executeAssertion(command, callsite);

            if (command.type === _type2.default.executeExpression) return yield _this11._executeExpression(command, callsite);

            if (command.type === _type2.default.getBrowserConsoleMessages) return yield _this11._enqueueBrowserConsoleMessagesCommand(command, callsite);

            return _this11._enqueueCommand(command, callsite);
        })();
    }

    _rejectCommandWithPageError(callsite) {
        const err = this.pendingPageError;

        err.callsite = callsite;
        this.pendingPageError = null;

        return _pinkie2.default.reject(err);
    }

    // Role management
    getStateSnapshot() {
        var _this12 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const state = _this12.session.getStateSnapshot();

            state.storages = yield _this12.executeCommand(new _service.BackupStoragesCommand());

            return state;
        })();
    }

    switchToCleanRun() {
        var _this13 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this13.ctx = (0, _create2.default)(null);
            _this13.fixtureCtx = (0, _create2.default)(null);
            _this13.consoleMessages = new _browserConsoleMessages2.default();

            _this13.session.useStateSnapshot(null);

            if (_this13.activeDialogHandler) {
                const removeDialogHandlerCommand = new _actions.SetNativeDialogHandlerCommand({ dialogHandler: { fn: null } });

                yield _this13.executeCommand(removeDialogHandlerCommand);
            }

            if (_this13.speed !== _this13.opts.speed) {
                const setSpeedCommand = new _actions.SetTestSpeedCommand({ speed: _this13.opts.speed });

                yield _this13.executeCommand(setSpeedCommand);
            }

            if (_this13.pageLoadTimeout !== _this13.opts.pageLoadTimeout) {
                const setPageLoadTimeoutCommand = new _actions.SetPageLoadTimeoutCommand({ duration: _this13.opts.pageLoadTimeout });

                yield _this13.executeCommand(setPageLoadTimeoutCommand);
            }
        })();
    }

    _getStateSnapshotFromRole(role) {
        var _this14 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const prevPhase = _this14.phase;

            _this14.phase = _phase2.default.inRoleInitializer;

            if (role.phase === _phase4.default.uninitialized) yield role.initialize(_this14);else if (role.phase === _phase4.default.pendingInitialization) yield (0, _promisifyEvent2.default)(role, 'initialized');

            if (role.initErr) throw role.initErr;

            _this14.phase = prevPhase;

            return role.stateSnapshot;
        })();
    }

    _useRole(role, callsite) {
        var _this15 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (_this15.phase === _phase2.default.inRoleInitializer) throw new _testRun.RoleSwitchInRoleInitializerError(callsite);

            _this15.disableDebugBreakpoints = true;

            const bookmark = new _bookmark2.default(_this15, role);

            yield bookmark.init();

            if (_this15.currentRoleId) _this15.usedRoleStates[_this15.currentRoleId] = yield _this15.getStateSnapshot();

            const stateSnapshot = _this15.usedRoleStates[role.id] || (yield _this15._getStateSnapshotFromRole(role));

            _this15.session.useStateSnapshot(stateSnapshot);

            _this15.currentRoleId = role.id;

            yield bookmark.restore(callsite, stateSnapshot);

            _this15.disableDebugBreakpoints = false;
        })();
    }

    // Get current URL
    getCurrentUrl() {
        var _this16 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const builder = new _clientFunctionBuilder2.default(function () {
                /* eslint-disable no-undef */
                return window.location.href;
                /* eslint-enable no-undef */
            }, { boundTestRun: _this16 });

            const getLocation = builder.getFunction();

            return yield getLocation();
        })();
    }

    _disconnect(err) {
        this.disconnected = true;

        this._rejectCurrentDriverTask(err);

        this.emit('disconnected', err);

        delete _testRunTracker2.default.activeTestRuns[this.session.id];
    }
}

exports.default = TestRun; // Service message handlers

const ServiceMessages = TestRun.prototype;

ServiceMessages[_clientMessages2.default.ready] = function (msg) {
    this.debugLog.driverMessage(msg);

    this._clearPendingRequest();

    // NOTE: the driver sends the status for the second time if it didn't get a response at the
    // first try. This is possible when the page was unloaded after the driver sent the status.
    if (msg.status.id === this.lastDriverStatusId) return this.lastDriverStatusResponse;

    this.lastDriverStatusId = msg.status.id;
    this.lastDriverStatusResponse = this._handleDriverRequest(msg.status);

    if (this.lastDriverStatusResponse) return this.lastDriverStatusResponse;

    // NOTE: browsers abort an opened xhr request after a certain timeout (the actual duration depends on the browser).
    // To avoid this, we send an empty response after 2 minutes if we didn't get any command.
    const responseTimeout = setTimeout(() => this._resolvePendingRequest(null), MAX_RESPONSE_DELAY);

    return new _pinkie2.default((resolve, reject) => {
        this.pendingRequest = { resolve, reject, responseTimeout };
    });
};

ServiceMessages[_clientMessages2.default.readyForBrowserManipulation] = (() => {
    var _ref2 = (0, _asyncToGenerator3.default)(function* (msg) {
        this.debugLog.driverMessage(msg);

        let result = null;
        let error = null;

        try {
            result = yield this.browserManipulationQueue.executePendingManipulation(msg);
        } catch (err) {
            error = err;
        }

        return { result, error };
    });

    return function (_x) {
        return _ref2.apply(this, arguments);
    };
})();

ServiceMessages[_clientMessages2.default.waitForFileDownload] = function (msg) {
    this.debugLog.driverMessage(msg);

    return new _pinkie2.default(resolve => {
        if (this.fileDownloadingHandled) {
            this.fileDownloadingHandled = false;
            resolve(true);
        } else this.resolveWaitForFileDownloadingPromise = resolve;
    });
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
