'use strict';

exports.__esModule = true;

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

// Validations
let getValidHostname = (() => {
    var _ref = (0, _asyncToGenerator3.default)(function* (hostname) {
        if (hostname) {
            const valid = yield endpointUtils.isMyHostname(hostname);

            if (!valid) throw new _runtime.GeneralError(_message2.default.invalidHostname, hostname);
        } else hostname = endpointUtils.getIPAddress();

        return hostname;
    });

    return function getValidHostname(_x) {
        return _ref.apply(this, arguments);
    };
})();

let getValidPort = (() => {
    var _ref2 = (0, _asyncToGenerator3.default)(function* (port) {
        if (port) {
            const isFree = yield endpointUtils.isFreePort(port);

            if (!isFree) throw new _runtime.GeneralError(_message2.default.portIsNotFree, port);
        } else port = yield endpointUtils.getFreePort();

        return port;
    });

    return function getValidPort(_x2) {
        return _ref2.apply(this, arguments);
    };
})();

// API


let createTestCafe = (() => {
    var _ref3 = (0, _asyncToGenerator3.default)(function* (hostname, port1, port2, sslOptions, developmentMode, retryTestPages) {
        var _ref4 = yield _pinkie2.default.all([getValidHostname(hostname), getValidPort(port1), getValidPort(port2)]);

        hostname = _ref4[0];
        port1 = _ref4[1];
        port2 = _ref4[2];


        const testcafe = new _testcafe2.default(hostname, port1, port2, {
            ssl: sslOptions,
            developmentMode,
            retryTestPages
        });

        (0, _asyncExitHook2.default)(function (cb) {
            return testcafe.close().then(cb);
        });

        return testcafe;
    });

    return function createTestCafe(_x3, _x4, _x5, _x6, _x7, _x8) {
        return _ref3.apply(this, arguments);
    };
})();

// Embedding utils


var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _testcafe = require('./testcafe');

var _testcafe2 = _interopRequireDefault(_testcafe);

var _endpointUtils = require('endpoint-utils');

var endpointUtils = _interopRequireWildcard(_endpointUtils);

var _asyncExitHook = require('async-exit-hook');

var _asyncExitHook2 = _interopRequireDefault(_asyncExitHook);

var _runtime = require('./errors/runtime');

var _message = require('./errors/runtime/message');

var _message2 = _interopRequireDefault(_message);

var _embeddingUtils = require('./embedding-utils');

var _embeddingUtils2 = _interopRequireDefault(_embeddingUtils);

var _exportableLib = require('./api/exportable-lib');

var _exportableLib2 = _interopRequireDefault(_exportableLib);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

createTestCafe.embeddingUtils = _embeddingUtils2.default;

// Common API
(0, _keys2.default)(_exportableLib2.default).forEach(key => {
    createTestCafe[key] = _exportableLib2.default[key];
});

exports.default = createTestCafe;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJob3N0bmFtZSIsInZhbGlkIiwiZW5kcG9pbnRVdGlscyIsImlzTXlIb3N0bmFtZSIsIkdlbmVyYWxFcnJvciIsIk1FU1NBR0UiLCJpbnZhbGlkSG9zdG5hbWUiLCJnZXRJUEFkZHJlc3MiLCJnZXRWYWxpZEhvc3RuYW1lIiwicG9ydCIsImlzRnJlZSIsImlzRnJlZVBvcnQiLCJwb3J0SXNOb3RGcmVlIiwiZ2V0RnJlZVBvcnQiLCJnZXRWYWxpZFBvcnQiLCJwb3J0MSIsInBvcnQyIiwic3NsT3B0aW9ucyIsImRldmVsb3BtZW50TW9kZSIsInJldHJ5VGVzdFBhZ2VzIiwiUHJvbWlzZSIsImFsbCIsInRlc3RjYWZlIiwiVGVzdENhZmUiLCJzc2wiLCJjbG9zZSIsInRoZW4iLCJjYiIsImNyZWF0ZVRlc3RDYWZlIiwiZW1iZWRkaW5nVXRpbHMiLCJleHBvcnRhYmxlTGliIiwiZm9yRWFjaCIsImtleSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBVUE7OytDQUNBLFdBQWlDQSxRQUFqQyxFQUEyQztBQUN2QyxZQUFJQSxRQUFKLEVBQWM7QUFDVixrQkFBTUMsUUFBUSxNQUFNQyxjQUFjQyxZQUFkLENBQTJCSCxRQUEzQixDQUFwQjs7QUFFQSxnQkFBSSxDQUFDQyxLQUFMLEVBQ0ksTUFBTSxJQUFJRyxxQkFBSixDQUFpQkMsa0JBQVFDLGVBQXpCLEVBQTBDTixRQUExQyxDQUFOO0FBQ1AsU0FMRCxNQU9JQSxXQUFXRSxjQUFjSyxZQUFkLEVBQVg7O0FBRUosZUFBT1AsUUFBUDtBQUNILEs7O29CQVhjUSxnQjs7Ozs7O2dEQWFmLFdBQTZCQyxJQUE3QixFQUFtQztBQUMvQixZQUFJQSxJQUFKLEVBQVU7QUFDTixrQkFBTUMsU0FBUyxNQUFNUixjQUFjUyxVQUFkLENBQXlCRixJQUF6QixDQUFyQjs7QUFFQSxnQkFBSSxDQUFDQyxNQUFMLEVBQ0ksTUFBTSxJQUFJTixxQkFBSixDQUFpQkMsa0JBQVFPLGFBQXpCLEVBQXdDSCxJQUF4QyxDQUFOO0FBQ1AsU0FMRCxNQU9JQSxPQUFPLE1BQU1QLGNBQWNXLFdBQWQsRUFBYjs7QUFFSixlQUFPSixJQUFQO0FBQ0gsSzs7b0JBWGNLLFk7Ozs7O0FBYWY7Ozs7Z0RBQ0EsV0FBK0JkLFFBQS9CLEVBQXlDZSxLQUF6QyxFQUFnREMsS0FBaEQsRUFBdURDLFVBQXZELEVBQW1FQyxlQUFuRSxFQUFvRkMsY0FBcEYsRUFBb0c7QUFBQSxvQkFDckUsTUFBTUMsaUJBQVFDLEdBQVIsQ0FBWSxDQUN6Q2IsaUJBQWlCUixRQUFqQixDQUR5QyxFQUV6Q2MsYUFBYUMsS0FBYixDQUZ5QyxFQUd6Q0QsYUFBYUUsS0FBYixDQUh5QyxDQUFaLENBRCtEOztBQUMvRmhCLGdCQUQrRjtBQUNyRmUsYUFEcUY7QUFDOUVDLGFBRDhFOzs7QUFPaEcsY0FBTU0sV0FBVyxJQUFJQyxrQkFBSixDQUFhdkIsUUFBYixFQUF1QmUsS0FBdkIsRUFBOEJDLEtBQTlCLEVBQXFDO0FBQ2xEUSxpQkFBS1AsVUFENkM7QUFFbERDLDJCQUZrRDtBQUdsREM7QUFIa0QsU0FBckMsQ0FBakI7O0FBTUEscUNBQWM7QUFBQSxtQkFBTUcsU0FBU0csS0FBVCxHQUFpQkMsSUFBakIsQ0FBc0JDLEVBQXRCLENBQU47QUFBQSxTQUFkOztBQUVBLGVBQU9MLFFBQVA7QUFDSCxLOztvQkFoQmNNLGM7Ozs7O0FBa0JmOzs7QUF4REE7Ozs7QUFDQTs7OztBQUNBOztJQUFZMUIsYTs7QUFDWjs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7QUFrREEwQixlQUFlQyxjQUFmLEdBQWdDQSx3QkFBaEM7O0FBRUE7QUFDQSxvQkFBWUMsdUJBQVosRUFBMkJDLE9BQTNCLENBQW1DQyxPQUFPO0FBQ3RDSixtQkFBZUksR0FBZixJQUFzQkYsd0JBQWNFLEdBQWQsQ0FBdEI7QUFDSCxDQUZEOztrQkFJZUosYyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9taXNlIGZyb20gJ3BpbmtpZSc7XG5pbXBvcnQgVGVzdENhZmUgZnJvbSAnLi90ZXN0Y2FmZSc7XG5pbXBvcnQgKiBhcyBlbmRwb2ludFV0aWxzIGZyb20gJ2VuZHBvaW50LXV0aWxzJztcbmltcG9ydCBzZXR1cEV4aXRIb29rIGZyb20gJ2FzeW5jLWV4aXQtaG9vayc7XG5pbXBvcnQgeyBHZW5lcmFsRXJyb3IgfSBmcm9tICcuL2Vycm9ycy9ydW50aW1lJztcbmltcG9ydCBNRVNTQUdFIGZyb20gJy4vZXJyb3JzL3J1bnRpbWUvbWVzc2FnZSc7XG5pbXBvcnQgZW1iZWRkaW5nVXRpbHMgZnJvbSAnLi9lbWJlZGRpbmctdXRpbHMnO1xuaW1wb3J0IGV4cG9ydGFibGVMaWIgZnJvbSAnLi9hcGkvZXhwb3J0YWJsZS1saWInO1xuXG5cbi8vIFZhbGlkYXRpb25zXG5hc3luYyBmdW5jdGlvbiBnZXRWYWxpZEhvc3RuYW1lIChob3N0bmFtZSkge1xuICAgIGlmIChob3N0bmFtZSkge1xuICAgICAgICBjb25zdCB2YWxpZCA9IGF3YWl0IGVuZHBvaW50VXRpbHMuaXNNeUhvc3RuYW1lKGhvc3RuYW1lKTtcblxuICAgICAgICBpZiAoIXZhbGlkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEdlbmVyYWxFcnJvcihNRVNTQUdFLmludmFsaWRIb3N0bmFtZSwgaG9zdG5hbWUpO1xuICAgIH1cbiAgICBlbHNlXG4gICAgICAgIGhvc3RuYW1lID0gZW5kcG9pbnRVdGlscy5nZXRJUEFkZHJlc3MoKTtcblxuICAgIHJldHVybiBob3N0bmFtZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0VmFsaWRQb3J0IChwb3J0KSB7XG4gICAgaWYgKHBvcnQpIHtcbiAgICAgICAgY29uc3QgaXNGcmVlID0gYXdhaXQgZW5kcG9pbnRVdGlscy5pc0ZyZWVQb3J0KHBvcnQpO1xuXG4gICAgICAgIGlmICghaXNGcmVlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEdlbmVyYWxFcnJvcihNRVNTQUdFLnBvcnRJc05vdEZyZWUsIHBvcnQpO1xuICAgIH1cbiAgICBlbHNlXG4gICAgICAgIHBvcnQgPSBhd2FpdCBlbmRwb2ludFV0aWxzLmdldEZyZWVQb3J0KCk7XG5cbiAgICByZXR1cm4gcG9ydDtcbn1cblxuLy8gQVBJXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVUZXN0Q2FmZSAoaG9zdG5hbWUsIHBvcnQxLCBwb3J0Miwgc3NsT3B0aW9ucywgZGV2ZWxvcG1lbnRNb2RlLCByZXRyeVRlc3RQYWdlcykge1xuICAgIFtob3N0bmFtZSwgcG9ydDEsIHBvcnQyXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgZ2V0VmFsaWRIb3N0bmFtZShob3N0bmFtZSksXG4gICAgICAgIGdldFZhbGlkUG9ydChwb3J0MSksXG4gICAgICAgIGdldFZhbGlkUG9ydChwb3J0MilcbiAgICBdKTtcblxuICAgIGNvbnN0IHRlc3RjYWZlID0gbmV3IFRlc3RDYWZlKGhvc3RuYW1lLCBwb3J0MSwgcG9ydDIsIHtcbiAgICAgICAgc3NsOiBzc2xPcHRpb25zLFxuICAgICAgICBkZXZlbG9wbWVudE1vZGUsXG4gICAgICAgIHJldHJ5VGVzdFBhZ2VzXG4gICAgfSk7XG5cbiAgICBzZXR1cEV4aXRIb29rKGNiID0+IHRlc3RjYWZlLmNsb3NlKCkudGhlbihjYikpO1xuXG4gICAgcmV0dXJuIHRlc3RjYWZlO1xufVxuXG4vLyBFbWJlZGRpbmcgdXRpbHNcbmNyZWF0ZVRlc3RDYWZlLmVtYmVkZGluZ1V0aWxzID0gZW1iZWRkaW5nVXRpbHM7XG5cbi8vIENvbW1vbiBBUElcbk9iamVjdC5rZXlzKGV4cG9ydGFibGVMaWIpLmZvckVhY2goa2V5ID0+IHtcbiAgICBjcmVhdGVUZXN0Q2FmZVtrZXldID0gZXhwb3J0YWJsZUxpYltrZXldO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVRlc3RDYWZlO1xuIl19
