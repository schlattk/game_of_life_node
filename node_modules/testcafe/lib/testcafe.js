'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _sourceMapSupport = require('source-map-support');

var _sourceMapSupport2 = _interopRequireDefault(_sourceMapSupport);

var _readFileRelative = require('read-file-relative');

var _testcafeHammerhead = require('testcafe-hammerhead');

var _testcafeLegacyApi = require('testcafe-legacy-api');

var _gateway = require('./browser/connection/gateway');

var _gateway2 = _interopRequireDefault(_gateway);

var _connection = require('./browser/connection');

var _connection2 = _interopRequireDefault(_connection);

var _pool = require('./browser/provider/pool');

var _pool2 = _interopRequireDefault(_pool);

var _runner = require('./runner');

var _runner2 = _interopRequireDefault(_runner);

var _handleErrors = require('./utils/handle-errors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Const
const UI_STYLE = (0, _readFileRelative.readSync)('./client/ui/styles.css');
const UI_SPRITE = (0, _readFileRelative.readSync)('./client/ui/sprite.png', true);
const FAVICON = (0, _readFileRelative.readSync)('./client/ui/favicon.ico', true);

class TestCafe {
    constructor(hostname, port1, port2, options = {}) {
        this._setupSourceMapsSupport();

        (0, _handleErrors.registerErrorHandlers)();

        if (options.retryTestPages) options.staticContentCaching = { maxAge: 3600, mustRevalidate: false };

        this.closed = false;
        this.proxy = new _testcafeHammerhead.Proxy(hostname, port1, port2, options);
        this.browserConnectionGateway = new _gateway2.default(this.proxy, { retryTestPages: options.retryTestPages });
        this.runners = [];
        this.retryTestPages = options.retryTestPages;

        this._registerAssets(options.developmentMode);
    }

    _registerAssets(developmentMode) {
        const scriptNameSuffix = developmentMode ? 'js' : 'min.js';
        const coreScript = (0, _readFileRelative.readSync)(`./client/core/index.${scriptNameSuffix}`);
        const driverScript = (0, _readFileRelative.readSync)(`./client/driver/index.${scriptNameSuffix}`);
        const uiScript = (0, _readFileRelative.readSync)(`./client/ui/index.${scriptNameSuffix}`);
        const automationScript = (0, _readFileRelative.readSync)(`./client/automation/index.${scriptNameSuffix}`);

        this.proxy.GET('/testcafe-core.js', { content: coreScript, contentType: 'application/x-javascript' });
        this.proxy.GET('/testcafe-driver.js', { content: driverScript, contentType: 'application/x-javascript' });
        this.proxy.GET('/testcafe-legacy-runner.js', {
            content: _testcafeLegacyApi.CLIENT_RUNNER_SCRIPT,
            contentType: 'application/x-javascript'
        });
        this.proxy.GET('/testcafe-automation.js', { content: automationScript, contentType: 'application/x-javascript' });
        this.proxy.GET('/testcafe-ui.js', { content: uiScript, contentType: 'application/x-javascript' });
        this.proxy.GET('/testcafe-ui-sprite.png', { content: UI_SPRITE, contentType: 'image/png' });
        this.proxy.GET('/favicon.ico', { content: FAVICON, contentType: 'image/x-icon' });

        this.proxy.GET('/testcafe-ui-styles.css', {
            content: UI_STYLE,
            contentType: 'text/css',
            isShadowUIStylesheet: true
        });
    }

    _setupSourceMapsSupport() {
        _sourceMapSupport2.default.install({
            hookRequire: true,
            handleUncaughtExceptions: false,
            environment: 'node'
        });
    }

    // API
    createBrowserConnection() {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const browserInfo = yield _pool2.default.getBrowserInfo('remote');

            return new _connection2.default(_this.browserConnectionGateway, browserInfo, true);
        })();
    }

    createRunner() {
        const newRunner = new _runner2.default(this.proxy, this.browserConnectionGateway, { retryTestPages: this.retryTestPages });

        this.runners.push(newRunner);

        return newRunner;
    }

    close() {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (_this2.closed) return;

            _this2.closed = true;

            yield _pinkie2.default.all(_this2.runners.map(function (runner) {
                return runner.stop();
            }));

            yield _pool2.default.dispose();

            _this2.browserConnectionGateway.close();
            _this2.proxy.close();
        })();
    }
}
exports.default = TestCafe;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90ZXN0Y2FmZS5qcyJdLCJuYW1lcyI6WyJVSV9TVFlMRSIsIlVJX1NQUklURSIsIkZBVklDT04iLCJUZXN0Q2FmZSIsImNvbnN0cnVjdG9yIiwiaG9zdG5hbWUiLCJwb3J0MSIsInBvcnQyIiwib3B0aW9ucyIsIl9zZXR1cFNvdXJjZU1hcHNTdXBwb3J0IiwicmV0cnlUZXN0UGFnZXMiLCJzdGF0aWNDb250ZW50Q2FjaGluZyIsIm1heEFnZSIsIm11c3RSZXZhbGlkYXRlIiwiY2xvc2VkIiwicHJveHkiLCJQcm94eSIsImJyb3dzZXJDb25uZWN0aW9uR2F0ZXdheSIsIkJyb3dzZXJDb25uZWN0aW9uR2F0ZXdheSIsInJ1bm5lcnMiLCJfcmVnaXN0ZXJBc3NldHMiLCJkZXZlbG9wbWVudE1vZGUiLCJzY3JpcHROYW1lU3VmZml4IiwiY29yZVNjcmlwdCIsImRyaXZlclNjcmlwdCIsInVpU2NyaXB0IiwiYXV0b21hdGlvblNjcmlwdCIsIkdFVCIsImNvbnRlbnQiLCJjb250ZW50VHlwZSIsIkxFR0FDWV9SVU5ORVJfU0NSSVBUIiwiaXNTaGFkb3dVSVN0eWxlc2hlZXQiLCJzb3VyY2VNYXBTdXBwb3J0IiwiaW5zdGFsbCIsImhvb2tSZXF1aXJlIiwiaGFuZGxlVW5jYXVnaHRFeGNlcHRpb25zIiwiZW52aXJvbm1lbnQiLCJjcmVhdGVCcm93c2VyQ29ubmVjdGlvbiIsImJyb3dzZXJJbmZvIiwiYnJvd3NlclByb3ZpZGVyUG9vbCIsImdldEJyb3dzZXJJbmZvIiwiQnJvd3NlckNvbm5lY3Rpb24iLCJjcmVhdGVSdW5uZXIiLCJuZXdSdW5uZXIiLCJSdW5uZXIiLCJwdXNoIiwiY2xvc2UiLCJQcm9taXNlIiwiYWxsIiwibWFwIiwicnVubmVyIiwic3RvcCIsImRpc3Bvc2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFF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QUM3QixrQkFBTUMsY0FBYyxNQUFNQyxlQUFvQkMsY0FBcEIsQ0FBbUMsUUFBbkMsQ0FBMUI7O0FBRUEsbUJBQU8sSUFBSUMsb0JBQUosQ0FBc0IsTUFBS3hCLHdCQUEzQixFQUFxRHFCLFdBQXJELEVBQWtFLElBQWxFLENBQVA7QUFINkI7QUFJaEM7O0FBRURJLG1CQUFnQjtBQUNaLGNBQU1DLFlBQVksSUFBSUMsZ0JBQUosQ0FBVyxLQUFLN0IsS0FBaEIsRUFBdUIsS0FBS0Usd0JBQTVCLEVBQXNELEVBQUVQLGdCQUFnQixLQUFLQSxjQUF2QixFQUF0RCxDQUFsQjs7QUFFQSxhQUFLUyxPQUFMLENBQWEwQixJQUFiLENBQWtCRixTQUFsQjs7QUFFQSxlQUFPQSxTQUFQO0FBQ0g7O0FBRUtHLFNBQU4sR0FBZTtBQUFBOztBQUFBO0FBQ1gsZ0JBQUksT0FBS2hDLE1BQVQsRUFDSTs7QUFFSixtQkFBS0EsTUFBTCxHQUFjLElBQWQ7O0FBRUEsa0JBQU1pQyxpQkFBUUMsR0FBUixDQUFZLE9BQUs3QixPQUFMLENBQWE4QixHQUFiLENBQWlCO0FBQUEsdUJBQVVDLE9BQU9DLElBQVAsRUFBVjtBQUFBLGFBQWpCLENBQVosQ0FBTjs7QUFFQSxrQkFBTVosZUFBb0JhLE9BQXBCLEVBQU47O0FBRUEsbUJBQUtuQyx3QkFBTCxDQUE4QjZCLEtBQTlCO0FBQ0EsbUJBQUsvQixLQUFMLENBQVcrQixLQUFYO0FBWFc7QUFZZDtBQTlFeUI7a0JBQVQzQyxRIiwiZmlsZSI6InRlc3RjYWZlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb21pc2UgZnJvbSAncGlua2llJztcbmltcG9ydCBzb3VyY2VNYXBTdXBwb3J0IGZyb20gJ3NvdXJjZS1tYXAtc3VwcG9ydCc7XG5pbXBvcnQgeyByZWFkU3luYyBhcyByZWFkIH0gZnJvbSAncmVhZC1maWxlLXJlbGF0aXZlJztcbmltcG9ydCB7IFByb3h5IH0gZnJvbSAndGVzdGNhZmUtaGFtbWVyaGVhZCc7XG5pbXBvcnQgeyBDTElFTlRfUlVOTkVSX1NDUklQVCBhcyBMRUdBQ1lfUlVOTkVSX1NDUklQVCB9IGZyb20gJ3Rlc3RjYWZlLWxlZ2FjeS1hcGknO1xuaW1wb3J0IEJyb3dzZXJDb25uZWN0aW9uR2F0ZXdheSBmcm9tICcuL2Jyb3dzZXIvY29ubmVjdGlvbi9nYXRld2F5JztcbmltcG9ydCBCcm93c2VyQ29ubmVjdGlvbiBmcm9tICcuL2Jyb3dzZXIvY29ubmVjdGlvbic7XG5pbXBvcnQgYnJvd3NlclByb3ZpZGVyUG9vbCBmcm9tICcuL2Jyb3dzZXIvcHJvdmlkZXIvcG9vbCc7XG5pbXBvcnQgUnVubmVyIGZyb20gJy4vcnVubmVyJztcbmltcG9ydCB7IHJlZ2lzdGVyRXJyb3JIYW5kbGVycyB9IGZyb20gJy4vdXRpbHMvaGFuZGxlLWVycm9ycyc7XG5cbi8vIENvbnN0XG5jb25zdCBVSV9TVFlMRSAgPSByZWFkKCcuL2NsaWVudC91aS9zdHlsZXMuY3NzJyk7XG5jb25zdCBVSV9TUFJJVEUgPSByZWFkKCcuL2NsaWVudC91aS9zcHJpdGUucG5nJywgdHJ1ZSk7XG5jb25zdCBGQVZJQ09OICAgPSByZWFkKCcuL2NsaWVudC91aS9mYXZpY29uLmljbycsIHRydWUpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXN0Q2FmZSB7XG4gICAgY29uc3RydWN0b3IgKGhvc3RuYW1lLCBwb3J0MSwgcG9ydDIsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICB0aGlzLl9zZXR1cFNvdXJjZU1hcHNTdXBwb3J0KCk7XG5cbiAgICAgICAgcmVnaXN0ZXJFcnJvckhhbmRsZXJzKCk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMucmV0cnlUZXN0UGFnZXMpXG4gICAgICAgICAgICBvcHRpb25zLnN0YXRpY0NvbnRlbnRDYWNoaW5nID0geyBtYXhBZ2U6IDM2MDAsIG11c3RSZXZhbGlkYXRlOiBmYWxzZSB9O1xuXG4gICAgICAgIHRoaXMuY2xvc2VkICAgICAgICAgICAgICAgICAgID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJveHkgICAgICAgICAgICAgICAgICAgID0gbmV3IFByb3h5KGhvc3RuYW1lLCBwb3J0MSwgcG9ydDIsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmJyb3dzZXJDb25uZWN0aW9uR2F0ZXdheSA9IG5ldyBCcm93c2VyQ29ubmVjdGlvbkdhdGV3YXkodGhpcy5wcm94eSwgeyByZXRyeVRlc3RQYWdlczogb3B0aW9ucy5yZXRyeVRlc3RQYWdlcyB9KTtcbiAgICAgICAgdGhpcy5ydW5uZXJzICAgICAgICAgICAgICAgICAgPSBbXTtcbiAgICAgICAgdGhpcy5yZXRyeVRlc3RQYWdlcyAgICAgICAgICAgPSBvcHRpb25zLnJldHJ5VGVzdFBhZ2VzO1xuXG4gICAgICAgIHRoaXMuX3JlZ2lzdGVyQXNzZXRzKG9wdGlvbnMuZGV2ZWxvcG1lbnRNb2RlKTtcbiAgICB9XG5cbiAgICBfcmVnaXN0ZXJBc3NldHMgKGRldmVsb3BtZW50TW9kZSkge1xuICAgICAgICBjb25zdCBzY3JpcHROYW1lU3VmZml4ID0gZGV2ZWxvcG1lbnRNb2RlID8gJ2pzJyA6ICdtaW4uanMnO1xuICAgICAgICBjb25zdCBjb3JlU2NyaXB0ICAgICAgID0gcmVhZChgLi9jbGllbnQvY29yZS9pbmRleC4ke3NjcmlwdE5hbWVTdWZmaXh9YCk7XG4gICAgICAgIGNvbnN0IGRyaXZlclNjcmlwdCAgICAgPSByZWFkKGAuL2NsaWVudC9kcml2ZXIvaW5kZXguJHtzY3JpcHROYW1lU3VmZml4fWApO1xuICAgICAgICBjb25zdCB1aVNjcmlwdCAgICAgICAgID0gcmVhZChgLi9jbGllbnQvdWkvaW5kZXguJHtzY3JpcHROYW1lU3VmZml4fWApO1xuICAgICAgICBjb25zdCBhdXRvbWF0aW9uU2NyaXB0ID0gcmVhZChgLi9jbGllbnQvYXV0b21hdGlvbi9pbmRleC4ke3NjcmlwdE5hbWVTdWZmaXh9YCk7XG5cbiAgICAgICAgdGhpcy5wcm94eS5HRVQoJy90ZXN0Y2FmZS1jb3JlLmpzJywgeyBjb250ZW50OiBjb3JlU2NyaXB0LCBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL3gtamF2YXNjcmlwdCcgfSk7XG4gICAgICAgIHRoaXMucHJveHkuR0VUKCcvdGVzdGNhZmUtZHJpdmVyLmpzJywgeyBjb250ZW50OiBkcml2ZXJTY3JpcHQsIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24veC1qYXZhc2NyaXB0JyB9KTtcbiAgICAgICAgdGhpcy5wcm94eS5HRVQoJy90ZXN0Y2FmZS1sZWdhY3ktcnVubmVyLmpzJywge1xuICAgICAgICAgICAgY29udGVudDogICAgIExFR0FDWV9SVU5ORVJfU0NSSVBULFxuICAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi94LWphdmFzY3JpcHQnXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnByb3h5LkdFVCgnL3Rlc3RjYWZlLWF1dG9tYXRpb24uanMnLCB7IGNvbnRlbnQ6IGF1dG9tYXRpb25TY3JpcHQsIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24veC1qYXZhc2NyaXB0JyB9KTtcbiAgICAgICAgdGhpcy5wcm94eS5HRVQoJy90ZXN0Y2FmZS11aS5qcycsIHsgY29udGVudDogdWlTY3JpcHQsIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24veC1qYXZhc2NyaXB0JyB9KTtcbiAgICAgICAgdGhpcy5wcm94eS5HRVQoJy90ZXN0Y2FmZS11aS1zcHJpdGUucG5nJywgeyBjb250ZW50OiBVSV9TUFJJVEUsIGNvbnRlbnRUeXBlOiAnaW1hZ2UvcG5nJyB9KTtcbiAgICAgICAgdGhpcy5wcm94eS5HRVQoJy9mYXZpY29uLmljbycsIHsgY29udGVudDogRkFWSUNPTiwgY29udGVudFR5cGU6ICdpbWFnZS94LWljb24nIH0pO1xuXG4gICAgICAgIHRoaXMucHJveHkuR0VUKCcvdGVzdGNhZmUtdWktc3R5bGVzLmNzcycsIHtcbiAgICAgICAgICAgIGNvbnRlbnQ6ICAgICAgICAgICAgICBVSV9TVFlMRSxcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAgICAgICAgICAndGV4dC9jc3MnLFxuICAgICAgICAgICAgaXNTaGFkb3dVSVN0eWxlc2hlZXQ6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX3NldHVwU291cmNlTWFwc1N1cHBvcnQgKCkge1xuICAgICAgICBzb3VyY2VNYXBTdXBwb3J0Lmluc3RhbGwoe1xuICAgICAgICAgICAgaG9va1JlcXVpcmU6ICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgaGFuZGxlVW5jYXVnaHRFeGNlcHRpb25zOiBmYWxzZSxcbiAgICAgICAgICAgIGVudmlyb25tZW50OiAgICAgICAgICAgICAgJ25vZGUnXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFQSVxuICAgIGFzeW5jIGNyZWF0ZUJyb3dzZXJDb25uZWN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgYnJvd3NlckluZm8gPSBhd2FpdCBicm93c2VyUHJvdmlkZXJQb29sLmdldEJyb3dzZXJJbmZvKCdyZW1vdGUnKTtcblxuICAgICAgICByZXR1cm4gbmV3IEJyb3dzZXJDb25uZWN0aW9uKHRoaXMuYnJvd3NlckNvbm5lY3Rpb25HYXRld2F5LCBicm93c2VySW5mbywgdHJ1ZSk7XG4gICAgfVxuXG4gICAgY3JlYXRlUnVubmVyICgpIHtcbiAgICAgICAgY29uc3QgbmV3UnVubmVyID0gbmV3IFJ1bm5lcih0aGlzLnByb3h5LCB0aGlzLmJyb3dzZXJDb25uZWN0aW9uR2F0ZXdheSwgeyByZXRyeVRlc3RQYWdlczogdGhpcy5yZXRyeVRlc3RQYWdlcyB9KTtcblxuICAgICAgICB0aGlzLnJ1bm5lcnMucHVzaChuZXdSdW5uZXIpO1xuXG4gICAgICAgIHJldHVybiBuZXdSdW5uZXI7XG4gICAgfVxuXG4gICAgYXN5bmMgY2xvc2UgKCkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHRoaXMucnVubmVycy5tYXAocnVubmVyID0+IHJ1bm5lci5zdG9wKCkpKTtcblxuICAgICAgICBhd2FpdCBicm93c2VyUHJvdmlkZXJQb29sLmRpc3Bvc2UoKTtcblxuICAgICAgICB0aGlzLmJyb3dzZXJDb25uZWN0aW9uR2F0ZXdheS5jbG9zZSgpO1xuICAgICAgICB0aGlzLnByb3h5LmNsb3NlKCk7XG4gICAgfVxufVxuIl19
